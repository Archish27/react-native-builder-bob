name: Build template
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-templates.yml'
      - 'packages/create-react-native-library/**'
      - '!**.md'
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macos
        type:
          - module-legacy
          - module-mixed
          - module-new
          - view-legacy
          - view-mixed
          - view-new
        language:
          - java-objc
          - java-swift
          - kotlin-objc
          - kotlin-swift
        exclude:
          - os: macos
            language: kotlin-objc
          - os: macos
            language: kotlin-swift
          - type: module-new
            language: java-swift
          - type: module-new
            language: kotlin-swift
          - type: module-mixed
            language: java-swift
          - type: module-mixed
            language: kotlin-swift
          - type: view-new
            language: java-swift
          - type: view-new
            language: kotlin-swift
          - type: view-mixed
            language: java-swift
          - type: view-mixed
            language: kotlin-swift
        include:
          - os: ubuntu
            type: library
            language: js
          - os: ubuntu
            type: module-legacy
            language: cpp
          - os: ubuntu
            type: module-mixed
            language: cpp
          - os: ubuntu
            type: module-new
            language: cpp
          - os: macos
            type: module-legacy
            language: cpp
          - os: macos
            type: module-mixed
            language: cpp
          - os: macos
            type: module-new
            language: cpp

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.os }}-${{ matrix.type }}-${{ matrix.language }}
      cancel-in-progress: true

    runs-on: ${{ matrix.os }}-latest

    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
      WORK_DIR: ${{ matrix.os }}-${{ matrix.type }}-${{ matrix.language }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup
        uses: ./.github/actions/setup

      - name: Build package
        run: |
          yarn workspace create-react-native-library prepack

      - name: Create library
        run: |
          rm -rf ${{ env.WORK_DIR }} # Workaround for tests failing intermittently
          ./packages/create-react-native-library/bin/create-react-native-library ${{ env.WORK_DIR }} \
            --slug @bob/react-native-test \
            --description test \
            --author-name test \
            --author-email test@test \
            --author-url https://test.test \
            --repo-url https://test.test \
            --type ${{ matrix.type }} \
            --languages ${{ matrix.language }} \

      - name: Cache dependencies of library
        id: library-yarn-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORK_DIR }}/**/node_modules
            ${{ env.WORK_DIR }}/**/yarn.lock
          key: ${{ runner.os }}-library-yarn-${{ hashFiles(format('{0}/**/package.json', env.WORK_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-library-yarn-

      - name: Install dependencies of library
        if: steps.library-yarn-cache.outputs.cache-hit != 'true'
        working-directory: ${{ env.WORK_DIR }}
        run: |
          yarn install --cwd example
          yarn install

      - name: Get build target
        working-directory: ${{ env.WORK_DIR }}
        run: |
          # Build Android for only some matrices to skip redundant builds
          if [[ ${{ matrix.os }} == ubuntu ]]; then
            if [[ ${{ matrix.type }} == view-* && ${{ matrix.language }} == *-objc ]] || [[ ${{ matrix.type }} == module-* && ${{ matrix.language }} == *-objc ]] || [[ ${{ matrix.type }} == module-* && ${{ matrix.language }} == cpp ]]; then
              echo "android_build=1" >> $GITHUB_ENV
            fi
          fi

          # Build iOS for only some matrices to skip redundant builds
          if [[ ${{ matrix.os }} == macos ]]; then
            if [[ ${{ matrix.type }} == view-* && ${{ matrix.language }} == java-* ]] || [[ ${{ matrix.type }} == module-* && ${{ matrix.language }} == java-* ]] || [[ ${{ matrix.type }} == module-* && ${{ matrix.language }} == cpp ]]; then
              echo "ios_build=1" >> $GITHUB_ENV
            fi
          fi

      - name: Cache turborepo
        if: env.android_build == 1 || env.ios_build == 1
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORK_DIR }}/.turbo
          key: ${{ runner.os }}-library-turborepo-${{ matrix.type }}-${{ matrix.language }}-${{ hashFiles(format('{0}/**/yarn.lock', env.WORK_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-library-turborepo-${{ matrix.type }}-${{ matrix.language }}-

      - name: Check turborepo cache
        if: env.android_build == 1 || env.ios_build == 1
        working-directory: ${{ env.WORK_DIR }}
        run: |
          TURBO_CACHE_STATUS_ANDROID=$(node -p "($(yarn --silent turbo run build:android --cache-dir=".turbo/cache" --dry=json)).tasks.find(t => t.task === 'build:android').cache.status")
          TURBO_CACHE_STATUS_IOS=$(node -p "($(yarn --silent turbo run build:ios --cache-dir=".turbo/cache" --dry=json)).tasks.find(t => t.task === 'build:ios').cache.status")

          if [[ $TURBO_CACHE_STATUS_ANDROID == "HIT" ]]; then
            echo "turbo_cache_hit_android=1" >> $GITHUB_ENV
          fi

          if [[ $TURBO_CACHE_STATUS_IOS == "HIT" ]]; then
            echo "turbo_cache_hit_ios=1" >> $GITHUB_ENV
          fi

      - name: Lint library
        working-directory: ${{ env.WORK_DIR }}
        run: |
          yarn lint

      - name: Typecheck library
        working-directory: ${{ env.WORK_DIR }}
        run: |
          yarn typecheck

      - name: Test library
        working-directory: ${{ env.WORK_DIR }}
        run: |
          yarn test

      - name: Build library
        working-directory: ${{ env.WORK_DIR }}
        run: |
          yarn prepack

      - name: Build example (Web)
        working-directory: ${{ env.WORK_DIR }}
        if: matrix.language == 'js'
        run: |
          yarn example expo export:web

      - name: Install JDK
        if: env.android_build == 1 && env.turbo_cache_hit_android != 1
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '11'

      - name: Finalize Android SDK
        if: env.android_build == 1 && env.turbo_cache_hit_android != 1
        run: |
          /bin/bash -c "yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses > /dev/null"

      - name: Cache Gradle
        if: env.android_build == 1 && env.turbo_cache_hit_android != 1
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles(format('{0}/example/android/gradle/wrapper/gradle-wrapper.properties', env.WORK_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build example (Android)
        if: env.android_build == 1
        working-directory: ${{ env.WORK_DIR }}
        run: |
          yarn turbo run build:android --cache-dir=".turbo/cache"

      - name: Setup ccache
        if: env.ios_build == 1 && env.turbo_cache_hit_ios != 1
        run: |
          brew install ccache
          ln -s $(which ccache) /usr/local/bin/gcc
          ln -s $(which ccache) /usr/local/bin/g++
          ln -s $(which ccache) /usr/local/bin/cc
          ln -s $(which ccache) /usr/local/bin/c++
          ln -s $(which ccache) /usr/local/bin/clang
          ln -s $(which ccache) /usr/local/bin/clang++

      - name: Cache ccache
        if: env.ios_build == 1 && env.turbo_cache_hit_ios != 1
        uses: actions/cache@v3
        with:
          path: |
            /Users/$USER/Library/Caches/ccache
          key: ${{ runner.os }}-library-ccache-${{ hashFiles(format('{0}/example/ios/Podfile', env.WORK_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-library-ccache-

      - name: Cache cocoapods
        if: env.ios_build == 1 && env.turbo_cache_hit_ios != 1
        id: library-cocoapods-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORK_DIR }}/**/ios/Pods
            ${{ env.WORK_DIR }}/**/ios/Podfile.lock
          key: ${{ runner.os }}-library-cocoapods-${{ hashFiles(format('{0}/example/ios/Podfile', env.WORK_DIR)) }}-${{ hashFiles(format('{0}/**/yarn.lock', env.WORK_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-library-cocoapods-${{ hashFiles(format('{0}/example/ios/Podfile', env.WORK_DIR)) }}-
            ${{ runner.os }}-library-cocoapods-

      - name: Install cocoapods
        if: env.ios_build == 1 && env.turbo_cache_hit_ios != 1 && steps.library-cocoapods-cache.outputs.cache-hit != 'true'
        working-directory: ${{ env.WORK_DIR }}
        run: |
          yarn example pods
        env:
          NO_FLIPPER: 1

      - name: Build example (iOS)
        if: env.ios_build == 1
        working-directory: ${{ env.WORK_DIR }}
        run: |
          yarn turbo run build:ios --cache-dir=".turbo/cache"
        env:
          CCACHE_SLOPPINESS: clang_index_store,file_stat_matches,include_file_ctime,include_file_mtime,ivfsoverlay,pch_defines,modules,system_headers,time_macros
          CCACHE_FILECLONE: true
          CCACHE_DEPEND: true
          CCACHE_INODECACHE: true
          CCACHE_COMPILERCHECK: content
